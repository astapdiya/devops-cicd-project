pipeline {
  agent any
  environment {
    ECR_REPO = "225989348084.dkr.ecr.us-east-1.amazonaws.com/super-service"
    IMAGE_TAG = "latest"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', credentialsId: 'github-jenkins-cred', url: 'https://github.com/astapdiya/devops-cicd-project.git'
      }
    }

    stage('Docker Build & Push') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS-credentials-root']]) {
          sh '''
            aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REPO
            docker build -t $ECR_REPO:$IMAGE_TAG .
            docker push $ECR_REPO:$IMAGE_TAG
          '''
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('terraform') {
          sh 'terraform init'
          sh 'terraform apply -auto-approve'
        }
      }
    }

    stage('Deploy to EKS') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'AWS-credentials-root'
                ]]) {
                    sh '''
                        export AWS_REGION=us-east-1
                        export CLUSTER_NAME=super-service-cluster
                        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
                        kubectl apply -f k8s/ --validate=false
                    '''
                }
            }
        }


    stage('Run Ansible') {
      steps {
        sh 'ansible-playbook ansible/playbook.yml -i "localhost," --connection=local'
      }
    }
  }

  post {
    always {
      echo 'Pipeline completed.'
    }
    success {
      echo 'Pipeline ran successfully.'
    }
    failure {
      echo 'Pipeline failed.'
    }
  }
}
